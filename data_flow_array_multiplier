//sorce code
module arr_mult(A,B,out);
input [3:0]A,B;
output [7:0]out;
wire [3:0] p [3:0]; // intermediate product terms
wire [10:0]c;
wire [5:0]s;
genvar i;

generate 
 for(i=0;i<4;i=i+1)
  begin:arr_mult
   and a0( p[i][0],A[i],B[0]);
	and a1( p[i][1],A[i],B[1]);
	and a2( p[i][2],A[i],B[2]);
	and a3( p[i][3],A[i],B[3]);
  end
endgenerate

assign out[0]=p[0][0];

//taking the two components
half_adder h1(p[0][1],p[1][0],out[1],c[0]);
half_adder h2(p[1][1],p[2][0],s[0],c[1]);
half_adder h3(p[2][1],p[3][0],s[1],c[2]);

// final components
full_adder f1(p[0][2],c[0],s[0],out[2],c[3]);
full_adder f2(p[1][2],c[1],s[1],s[2],c[4]);
full_adder f3(p[2][2],c[2],p[3][1],s[3],c[5]);

//remaining final components
full_adder f4(p[0][3],c[3],s[2],out[3],c[6]);
full_adder f5(p[1][3],c[4],s[3],s[4],c[7]);
full_adder f6(p[2][3],c[5],p[3][2],s[5],c[8]);

half_adder h4(c[6],s[4],out[4],c[9]);
full_adder f7(c[9],c[7],s[5],out[5],c[10]);
full_adder f8(c[10],c[8],p[3][3],out[6],out[7]);
endmodule
